{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "nocheckin": {
        "prefix": "@nci",
        "body": "$LINE_COMMENT @NOCHECKIN [$CURRENT_DATE-$CURRENT_MONTH_NAME_SHORT-$CURRENT_YEAR] ${1:reason}",
        "description": "Flag for source control to not commit, only works with precommit hook"
    },
    "fixme": {
        "prefix": "//F",
        "body": "$LINE_COMMENT FIXME [$CURRENT_DATE-$CURRENT_MONTH_NAME_SHORT-$CURRENT_YEAR]: $1"
    },
    "todo": {
        "prefix": "//t",
        "body": "$LINE_COMMENT TODO [$CURRENT_DATE-$CURRENT_MONTH_NAME_SHORT-$CURRENT_YEAR]: $1"
    },
    "note": {
        "prefix": "//n",
        "body": "$LINE_COMMENT NOTE [$CURRENT_DATE-$CURRENT_MONTH_NAME_SHORT-$CURRENT_YEAR]: $1"
    },
    "throw": {
        "scope": "javascript, typescript",
        "prefix": "throw",
        "body": "throw new Error(`${1:$CURRENT_SECONDS_UNIX}`);"
    },
    "throw not-implemented": {
        "scope": "javascript, typescript",
        "prefix": "not implemented yet",
        "body": "throw new Error('Not Implemented Yet'); ${1:$LINE_COMMENT TODO [$CURRENT_DATE-$CURRENT_MONTH_NAME_SHORT-$CURRENT_YEAR]: $2}"
    },
    "region": {
        "prefix": "region",
        "body": [
            "$BLOCK_COMMENT region ${1/(.*)/${1:/upcase}/}",
            "$0",
            "$BLOCK_COMMENT endregion ${1/(.*)/${1:/upcase}/}"
        ]
    },
    "snippet": {
        "scope": "jsonc",
        "prefix": "snippet",
        "description": "Create a snippet",
        "body": [
            "\"${1:name}\" : {",
            "\t\"prefix\" : \"$2\",",
            "\t\"scope\" : \"$3\",",
            "\t\"description\" : \"$4\",",
            "\t\"body\" : [",
            "\t\t$0",
            "\t]",
            "}"
        ],
    },
    "open file on startup": {
        "prefix": "open",
        "description": "This snippet automatically inserts tasks that let you run a command and open specific file when a workspace is opened",
        "scope": "jsonc",
        "body": [
            "{",
            "\t\"label\": \"open files\",",
            "\t\"type\": \"shell\",",
            "\t\"command\": \"${1:code todo.todo}\",",
            "\t\"isBackground\": true,",
            "\t\"dependsOn\": [",
            "\t\t\"cleanup editors\"",
            "\t],",
            "\t\"runOptions\": {",
            "\t\t\"runOn\": \"folderOpen\"",
            "\t},",
            "\t\"presentation\": {",
            "\t\t\"echo\": false,",
            "\t\t\"reveal\": \"never\",",
            "\t\t\"focus\": false,",
            "\t\t\"clear\": true,",
            "\t},",
            "\t\"problemMatcher\": [],",
            "},",
            "{",
            "\t\"label\": \"cleanup editors\",",
            "\t\"command\": \"\\${command:workbench.action.closeAllEditors}\",",
            "\t\"isBackground\": true,",
            "\t\"problemMatcher\": []",
            "}"
        ]
    },
    "decorator": {
        "prefix": "decorator",
        "scope": "python, py",
        "description": "decorator",
        "body": [
            "def $1(_func=None, *, ${2:parameter}$3):",
            "\tdef decorator_$4(func):",
            "\t\t@functools.wraps(func)",
            "\t\tdef $4_wrapper(*args, **kwargs):",
            "\t\t\t_$2 = $2 if (isinstance($2, Iterable)) else ($2,)",
            "\t\t\t$0",
            "\t\t\treturn func(*args, **kwargs)",
            "\t\treturn $4_wrapper",
            "",
            "\tif _func is None: return decorator_$4",
            "\telse: return decorator_$4(_func)"
        ]
    }
}